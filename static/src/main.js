import Vue from 'vue'
import VueX from 'vuex'
import VueRouter from 'vue-router'
import VueResource from 'vue-resource';
import VueCharts from 'vue-chartjs';
import App from './App.vue'
import * as VueGoogleMaps from 'vue2-google-maps'

import Autogenerated from './pages/Autogenerated.vue';
import CrowdstartedResults from './pages/CrowdstartedResults.vue';
import RunningResults from './pages/RunningResults.vue';
import NewCrowdstart from './pages/NewCrowdstart.vue';
import Crowdstarts from './pages/Crowdstarts.vue';
import SearchForm from './pages/SearchForm.vue';
import Suggestions from './pages/Suggestions.vue';
import BulkForm from './pages/BulkForm.vue';
import mapBus from './utils/mapBus';
import {createStore} from './store';

require('bootstrap/dist/css/bootstrap.css')

Vue.use(VueResource);
Vue.use(VueRouter);
Vue.use(VueX);
Vue.use(VueGoogleMaps, {
  load: {
    key: 'AIzaSyCrUks5eZWa7Me8ABr_3Som3rYBKXDmS6U',
    libraries: 'places,geometry',
  }
});

const router = new VueRouter({
  routes: [
    {
      path: '/:o/:d/bulk', component: BulkForm, name: 'bulk'
    },
    {
      path: '/:o/:d/search', component: SearchForm, name: 'search'
    },
    {
      path: '/:o/:d/suggestions', component: Suggestions, name: 'suggestions'
    },
    {
      path: '/', redirect: '/,/,/search'
    },
    {
      path: '/:o/:d/crowdstarted', component: CrowdstartedResults, name: 'crowdstarted'
    },
    {
      path: '/:o/:d/autogenerated', component: Autogenerated, name: 'autogenerated'
    },
    {
      path: '/:o/:d/new', component: NewCrowdstart, name: 'new'
    },
    {
      path: '/:o/:d/running', component: RunningResults, name: 'running'
    },
    {
      path: '/:o/:d/crowdstarts', component: Crowdstarts, name: 'crowdstarts'
    },
  ]
})

// router.beforeEach((to, from, next) => {
//   function paramsMatch() {
//     var toParams = _.sortBy(_.toPairs(to), [0, 1]);
//     var fromParams = _.sortBy(_.toPairs(from), [0, 1]);
//
//     return _.reduce(_.zip(toParams, fromParams),
//       (acc, [tp, fp]) =>
//         acc &&
//         tp[0] === fp[0] &&
//         tp[1] === fp[1],
//       acc)
//   }
//
//
//   if (to.path == from.path &&
//     paramsMatch(to.params, from.params)
//   ) {
//     // Probably because only query string changed
//     // In which case we ignore
//   } else {
//     next();
//   }
// })

const store = createStore();

var app = new Vue({
  el: '#app',
  template: `<App/>`,
  components: { App },
  router,
  store,
  watch: {
    '$route'(to, from) {
      this.$nextTick(() => mapBus.$emit('resize'))
    }
  },
  created() {
    if (this.$route.params.o) {
      var [olat, olng] = this.$route.params.o.split(',')
      if (olat && olng) {
        this.$store.commit('setOrigin', {
          lat: parseFloat(olat), lng: parseFloat(olng)
        })
      }
    }
    if (this.$route.params.d) {
      var [dlat, dlng] = this.$route.params.d.split(',')
      if (dlat && dlng) {
        this.$store.commit('setDestination', {
          lat: parseFloat(dlat), lng: parseFloat(dlng)
        })
      }
    }

    const updateQuery = () => {
      var state = this.$store.state;
      var o = state.origin ? `${state.origin.lat},${state.origin.lng}` : ','
      var d = state.destination ? `${state.destination.lat},${state.destination.lng}` : ','

      var n = {
        name: this.$route.name,
        params: {
          ...this.$route.params,
          o, d
        },
      };
      this.$router.replace(n)
    }

    store.watch(state => state.origin, updateQuery)
    store.watch(state => state.destination, updateQuery)
  }
})
